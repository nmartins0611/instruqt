## Controller setup
- name: Controller config for Terraform-Ansible
  hosts: controller.acme.example.com
  gather_facts: true
    
  tasks:
   # Create auth login token
    - name: get auth token and restart automation-controller if it fails
      block:
        - name: Refresh facts
          setup:

        - name: Create oauth token
          awx.awx.token:
            description: 'Instruqt lab'
            scope: "write"
            state: present
            controller_host: controller
            controller_username: "{{ controller_admin_user }}"
            controller_password: "{{ controller_admin_password }}"
            validate_certs: false
          register: _auth_token
          until: _auth_token is not failed
          delay: 3
          retries: 5
      rescue:
        - name: In rescue block for auth token
          debug:
            msg: "failed to get auth token. Restarting automation controller service"

        - name: restart the controller service
          ansible.builtin.service:
            name: automation-controller
            state: restarted

        - name: Ensure tower/controller is online and working
          uri:
            url: https://localhost/api/v2/ping/
            method: GET
            user: "{{ admin_username }}"
            password: "{{ admin_password }}"
            validate_certs: false
            force_basic_auth: true
          register: controller_online
          until: controller_online is success
          delay: 3
          retries: 5

        - name: Retry getting auth token
          awx.awx.token:
            description: 'Instruqt lab'
            scope: "write"
            state: present
            controller_host: controller
            controller_username: "{{ controller_admin_user }}"
            controller_password: "{{ controller_admin_password }}"
            validate_certs: false
          register: _auth_token
          until: _auth_token is not failed
          delay: 3
          retries: 5
      always:
        - name: Create fact.d dir
          ansible.builtin.file:
            path: "{{ custom_facts_dir }}"
            state: directory
            recurse: yes
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: 0755
          become: true

        - name: Create _auth_token custom fact
          ansible.builtin.copy:
            content: "{{ _auth_token.ansible_facts }}"
            dest: "{{ custom_facts_dir }}/{{ custom_facts_file }}"
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: 0644
          become: true
      check_mode: false
      when: ansible_local.custom_facts.controller_token is undefined
      tags:
        - auth-token

    - name: refresh facts
      setup:
        filter:
          - ansible_local
      tags:
        - always

    - name: create auth token fact
      ansible.builtin.set_fact:
        auth_token: "{{ ansible_local.custom_facts.controller_token }}"
        cacheable: true
      check_mode: false
      when: auth_token is undefined
      tags:
        - always
 
    - name: Ensure tower/controller is online and working
      uri:
        url: https://localhost/api/v2/ping/
        method: GET
        user: "{{ admin_username }}"
        password: "{{ admin_password }}"
        validate_certs: false
        force_basic_auth: true
      register: controller_online
      until: controller_online is success
      delay: 3
      retries: 5
      tags:
        - controller-config

# Controller objects
    - name: Add Organization
      awx.awx.organization:
        name: "{{ lab_organization }}"
        description: "ACME Corp Organization"
        state: present
        controller_oauthtoken: "{{ auth_token }}"
        validate_certs: false
      tags:
        - controller-config
        - controller-org
  
    - name: Add Instruqt Terraform EE
      awx.awx.execution_environment:
        name: "{{ controller_devops_ee }}"
        image: "quay.io/acme_corp/terraform_ee"
        pull: missing
        state: present
        controller_oauthtoken: "{{ auth_token }}"
        controller_host: "{{ controller_hostname }}"
        validate_certs: "{{ controller_validate_certs }}"
      tags:
        - controller-config
        - controller-ees

    - name: Pull Instruqt DevOps EE
      containers.podman.podman_image:
        name: "quay.io/acme_corp/terraform_ee"
      become_user: awx
      register: podman_pull
      until: podman_pull is not failed
      retries: 5
      delay: 15 
      tags:
        - controller-config
        - controller-ees

#     - name: Add lab inventories
#       awx.awx.inventory:
#         name: "{{ item.name }}"
#         description: "{{ item.description }}"
#         organization: "{{ lab_organization }}"
#         state: present
#         controller_oauthtoken: "{{ auth_token }}"
#         validate_certs: false
#       loop: "{{ lab_inventories }}"
#       tags:
#         - controller-config
#         - controller-objects

#     - name: Create hosts
#       awx.awx.host:
#         name: "{{ item.lab_host_name }}"
#         inventory: "{{ item.lab_host_inventory }}"
#         state: present
#         controller_oauthtoken: "{{ auth_token }}"
#         validate_certs: false
#         variables:  "{{ item.lab_host_vars }}"
#       loop: "{{ lab_hosts }}"
#       tags:
#         - controller-config
#         - controller-hosts
    
#     - name: Create groups
#       awx.awx.group:
#         name: "{{ item.group_name }}"
#         description: "{{ item.group_desc }}"
#         state: present
#         inventory: "{{ item.group_inventory }}"
#         hosts: "{{ item.group_hosts }}"
#         controller_oauthtoken: "{{ auth_token }}"
#         controller_host: "{{ controller_hostname }}"
#         validate_certs: "{{ controller_validate_certs }}"
#       loop: "{{ lab_groups }}"
#       tags:
#         - controller-config
#         - controller-groups

    - name: Add the lab ssh credential
      awx.awx.credential:
        name: "{{ lab_credential_name }}"
        organization: "{{ lab_organization }}"
        credential_type: Machine
        inputs:
          ssh_key_data: "{{ lookup('file', '/home/rhel/.ssh/id_rsa') }}"
        controller_oauthtoken: "{{ auth_token }}"
        validate_certs: false
      tags:
        - controller-config
        - controller-objects

    - name: Add the lab project
      awx.awx.project:
        name: "{{ lab_project_name }}"
        scm_type: git
        scm_url: "http://gitea:3000/{{ student_user }}/terraform-lab.git"
        organization: "{{ lab_organization }}"
        scm_update_on_launch: false
        scm_update_cache_timeout: 60
        scm_branch: "main"
        controller_oauthtoken: "{{ auth_token }}"
        validate_certs: false
      tags:
        - controller-config
        - controller-project

#     - name: Create job templates
#       awx.awx.job_template:
#         name: "{{ item.jt_name }}"
#         state: present
#         execution_environment: "{{ item.execution_env | default ( controller_devops_ee ) }}"
#         become_enabled: "{{ item.jt_become }}"
#         project: "{{ lab_project_name }}"
#         credential: "{{ lab_credential_name }}"
#         inventory: "{{  item.jt_inventory }}"
#         playbook: "{{ item.jt_playbook }}"
#         survey_enabled: "{{ item.survey_enabled | default( omit ) }}"
#         survey_spec: "{{ item.survey_spec | default(omit) }}"
#         ask_inventory_on_launch: "{{  item.jt_prompt_inventory }}"
#         ask_variables_on_launch: "{{  item.jt_prompt_inventory | default( omit )}}"
#         extra_vars: "{{ item.jt_extra_vars | default( omit ) }}"
#         controller_oauthtoken: "{{ auth_token }}"
#         validate_certs: false
#       loop: "{{ lab_job_templates }}"
#       tags:
#         - controller-config
#         - controller-jts

#     - name: Create Workflows
#       awx.awx.tower_workflow_job_template:
#         name: "{{ item.workflow_name }}"
#         inventory: "{{ item.workflow_inventory }}"
#         extra_vars: "{{ item.workflow_vars | default( omit ) }}"
#         ask_variables_on_launch: "{{ item.workflow_prompt_vars | default( true ) }}"
#         organization:  "{{ item.workflow_org }}"
#         schema: "{{ item.workflow_schema | default( omit )}}"
#         controller_oauthtoken: "{{ auth_token }}"
#         controller_host: "{{ controller_hostname }}"
#         validate_certs: "{{ controller_validate_certs }}"
#       loop: "{{ lab_devops_worklow }}"
#       tags:
#         - controller-config
#         - controller-workflows

#     - name: Add nodes to DevOps workflow
#       awx.awx.workflow_job_template_node:
#         state: present
#         identifier: "{{ item.workflow_node_id }}"
#         workflow_job_template: "{{ item.workflow_node_jt }}"
#         organization: "{{ item.workflow_node_org }}"
#         approval_node: "{{ item.workflow_node_approval | default( omit ) }}"
#         unified_job_template: "{{ item.workflow_node_unified_jt | default( omit ) }}"
#         success_nodes: "{{ item.workflow_node_success_nodes | default( omit ) }}"
#         controller_oauthtoken: "{{ auth_token }}"
#         controller_host: "{{ controller_hostname }}"
#         validate_certs: "{{ controller_validate_certs }}"
#       loop: "{{ lab_devops_worklow_nodes }}"
#       tags:
#         - controller-config
#         - controller-workflows

# # Controller users
#     ## Users
#     - name: Create Jenkins user
#       awx.awx.user:
#         username: "{{ jenkins_user }}"
#         password: "{{ jenkins_password }}"
#         email: jenkins@acme.example.com
#         controller_oauthtoken: "{{ auth_token }}"
#         controller_host: "{{ controller_hostname }}"
#         validate_certs: "{{ controller_validate_certs }}"
#       tags:
#         - controller-config
#         - controller-users

#     - name: Add jenkins as member of {{ lab_organization }}
#       awx.awx.role:
#         user: "{{ jenkins_user }}"
#         role: member
#         state: present
#         organization: "{{ lab_organization }}"
#         controller_oauthtoken: "{{ auth_token }}"
#         controller_host: "{{ controller_hostname }}"
#         validate_certs: "{{ controller_validate_certs }}"
#       tags:
#         - controller-config
#         - controller-users

#     - name: Give users access to job templates
#       awx.awx.role:
#         user: "{{ item.user }}"
#         role: "{{ item.role }}"
#         job_templates: "{{ item.job_template  | default( omit ) }}"
#         workflows: "{{ item.workflows | default( omit )}}"
#         state: "{{ item.state }}"
#         controller_oauthtoken: "{{ auth_token }}"
#         controller_host: "{{ controller_hostname }}"
#         validate_certs: "{{ controller_validate_certs }}"
#       loop: "{{ controller_user_vars }}"
#       tags:
#         - controller-config
#         - controller-users

#     - name: Create student admin user
#       awx.awx.user:
#         superuser: true
#         username: "{{ student_user }}"
#         password: "{{ student_password }}"
#         email: student@acme.example.com
#         controller_oauthtoken: "{{ auth_token }}"
#         controller_host: "{{ controller_hostname }}"
#         validate_certs: "{{ controller_validate_certs }}"
#       tags:
#         - controller-config
#         - controller-users

# ## Challenges check and solve

# # update-pipeline
#     - name: Check {{ lab_jt_name }} controller job ran successfuly
#       awx.awx.job_list:
#         status: successful
#         query:
#           name: "{{ lab_jt_name }}"
#         controller_oauthtoken: "{{ auth_token }}"
#         controller_host: "{{ controller_hostname }}"
#         validate_certs: "{{ controller_validate_certs }}"
#       register: __controller_job_check
#       failed_when: not __controller_job_check.results
#       tags:
#         - update-pipeline-check
    
#     - name: Run {{ lab_jt_name }} to solve
#       awx.awx.job_launch:
#         job_template: "{{ lab_jt_name }}"
#         controller_oauthtoken: "{{ auth_token }}"
#         controller_host: "{{ controller_hostname }}"
#         validate_certs: "{{ controller_validate_certs }}"
#         wait: true
#       register: __controller_job_run
#       tags:
#         - update-pipeline-solve
  
# ## update-app
#     - name: update-app-solve generate Jenkins crumb
#       ansible.builtin.uri:
#         url: http://jenkins:8080/crumbIssuer/api/json
#         mode: json
#         force_basic_auth: true
#         url_username: "{{ student_user }}"
#         url_password: "{{ student_password }}"
#         return_content: true
#       register: __jenkins_crumb
#       tags:
#         - update-app-solve
#         - update-app-solve-jenkins
#         - controller-approval-solve

#     - name: update-app-solve get ACMECorp builds
#       ansible.builtin.uri:
#         headers:
#           Cookie: "{{ __jenkins_crumb.cookies_string }}"
#           Jenkins-Crumb: "{{ __jenkins_crumb.json.crumb }}"
#         url: http://jenkins:8080/job/ACMECorp/api/json?pretty=true&tree=builds[number,status,url]
#         method: GET
#         force_basic_auth: true
#         url_username: "{{ student_user }}"
#         url_password: "{{ student_password }}"
#         return_content: true
#         validate_certs: false
#       register: __jenkins_builds
#       tags:
#         - update-app-solve
#         - update-app-solve-jenkins
#         - controller-approval-solve

#     - name: update-app-solve cancel ACMECorp Jenkins builds
#       ansible.builtin.uri:
#         headers:
#           Cookie: "{{ __jenkins_crumb.cookies_string }}"
#           Jenkins-Crumb: "{{ __jenkins_crumb.json.crumb }}"
#         url: "http://jenkins:8080/job/ACMECorp/{{ item.number }}/doDelete/api/json"
#         method: POST
#         mode: json
#         force_basic_auth: true
#         url_username: "{{ student_user }}"
#         url_password: "{{ student_password }}"
#         return_content: true
#         validate_certs: false
#         follow_redirects: true
#         status_code: 200
#       register: __remove_jenkins_builds
#       failed_when: false
#       when:
#         - __jenkins_builds.json.builds is defined
#         - __jenkins_builds.json.builds | length > 0
#       loop: "{{ __jenkins_builds.json.builds }}"
#       tags:
#         - update-app-solve
#         - update-app-solve-jenkins
#         - controller-approval-solve
 
#     # Need delay to give time for DevOps Workflow to start for check
#     - name: update-app-check Get running DevOps jobs
#       ansible.builtin.uri:
#         url: "https://controller/api/v2/workflow_jobs/?name={{ lab_jt_name | urlencode }}"
#         method: GET
#         force_basic_auth: true
#         url_username: "{{ student_user }}"
#         url_password: "{{ student_password }}"
#         return_content: true
#         validate_certs: false
#       register: __jt_devops_jobs_running
#       until: __jt_devops_jobs_running is search('running')
#       delay: 3
#       retries: 8
#       tags:
#         - update-app-check-workflow-jt

#     - name: update-app-solve stop DevOps workflow jobs
#       ansible.builtin.uri:
#         url: "https://controller/api/v2/workflow_jobs/{{ item.id }}/cancel/"
#         method: POST
#         force_basic_auth: true
#         url_username: "{{ student_user }}"
#         url_password: "{{ student_password }}"
#         return_content: true
#         validate_certs: false
#         status_code: [202]
#       register: __devops_jt_jobs_cancel
#       loop: "{{ query( 'awx.awx.controller_api', 'workflow_jobs', verify_ssl=False, oauth_token=auth_token, query_params={ 'name': lab_jt_name } ) | list  }}"
#       when:
#         - item.status != 'canceled'
#         - item.status != 'successful'
#         - item.status != 'failed'
#       tags:
#         - update-app-solve-workflow-jt
#         - update-app-solve
#         - controller-approval-solve

#     - name: update-app - home.html edits
#       ansible.builtin.lineinfile:
#         state: present
#         path: "/home/{{ ansible_user }}/acme_corp/app/lets_quiz/templates/quiz/home.html"
#         insertafter: '        <!-- FIX ME -->'
#         search_string: '<p class="display-4 d-none d-sm-block">Test your skills and become a master.</p>'
#         line: '        <p class="display-4 d-none d-sm-block">The latest and greatest version of the app deployed successfully.</p>'
#       check_mode: "{{ home_page_check_mode | default( false )}}"
#       register: __home_page_edits
#       tags:
#         - update-app-check-home-page
#         - update-app-solve

#     - name: update-app - debug home page edits
#       ansible.builtin.debug:
#         var: __home_page_edits
#         verbosity: 2
#       tags:
#         - update-app-check-home-page
#         - update-app-solve

#     - name: update-app - check if home.html was changed
#       ansible.builtin.assert:
#         that:
#           - not __home_page_edits.changed
#         fail_msg: The home.html page does not contain the correct line
#       tags:
#         - update-app-check-home-page

#     # - name: controller-approval-solve get all approvals
#     #   ansible.builtin.uri:
#     #     url: "https://controller/api/v2/workflow_approvals/?name={{ 'Deploy to Prod?' | urlencode }}"
#     #     method: GET
#     #     force_basic_auth: true
#     #     url_username: "{{ student_user }}"
#     #     url_password: "{{ student_password }}"
#     #     return_content: true
#     #     validate_certs: false
#     #   register: __workflow_approvals
#     #   tags:
#     #     - controller-approval-solve-approval
#     #     - controller-approval-solve

#     # This is to trigger the pipeline each time the solve script runs
#     - name: update-app-solve add date/time line
#       ansible.builtin.lineinfile:
#         state: present
#         path: "/home/{{ ansible_user }}/acme_corp/app/lets_quiz/manage.py"
#         search_string: '# solve-script-run '
#         line: '# solve-script-run {{ ansible_date_time.iso8601 }}'
#       check_mode: "{{ home_page_check_mode | default( false )}}"
#       register: __home_page_edits
#       tags:
#         - update-app-solve
#         - controller-approval-solve
      
#     - name: update-app solve push code to repo
#       ansible.builtin.command:
#         cmd: "{{ item }}"
#         chdir: "/home/{{ ansible_user }}/acme_corp"
#       become: true
#       become_user: "{{ ansible_user }}"
#       loop:
#         - "git add ."
#         - "git commit -m'Updated home.html'"
#         - "git push -u origin main --force"
#       tags:
#         - update-app-solve
#         - controller-approval-solve

#     - name: update-app - check Jenkins pipeline started
#       community.general.jenkins_job_info:
#         name: "ACMECorp"
#         url: http://jenkins:8080
#         user: "{{ student_user }}"
#         password: "{{ student_password }}"
#         validate_certs: false
#       register: __jenkins_job_status
#       until: __jenkins_job_status.jobs is search( 'anime' )
#       delay: 3
#       retries: 6
#       tags:
#         - update-app-check-pipeline
#         - update-app-check-pipeline-debug

#   ## controller-approval
#     - name: controller-approval-check get success approvals
#       ansible.builtin.uri:
#         url: "https://controller/api/v2/workflow_approvals/?name={{ 'Deploy to Prod?' | urlencode }}&status=successful"
#         method: GET
#         force_basic_auth: true
#         url_username: "{{ student_user }}"
#         url_password: "{{ student_password }}"
#         return_content: true
#         validate_certs: false
#       register: __workflow_approval_success
#       until: __workflow_approval_success.json.count > 0
#       delay: 3
#       retries: 8
#       tags:
#         - controller-approval-check-approval

#     - name: controller-approval-check DevOps Workflow
#       ansible.builtin.uri:
#         url: "https://controller/api/v2/workflow_jobs/?name={{ lab_jt_name | urlencode }}&status=successful"
#         method: GET
#         force_basic_auth: true
#         url_username: "{{ student_user }}"
#         url_password: "{{ student_password }}"
#         return_content: true
#         validate_certs: false
#       register: __jt_devops_jobs_success
#       until: __jt_devops_jobs_success.json.count > 0
#       delay: 3
#       retries: 8
#       tags:
#         - controller-approval-check-workflow-jt

#     - name: controller-approval-check home page
#       ansible.builtin.uri:
#         url: "http://controller:8000"
#         method: GET
#         validate_certs: false
#         status_code: 200
#         return_content: true
#       register: __home_page_status
#       until: __home_page_status.status == 200
#       failed_when: __home_page_status.content is not search('The latest and greatest version of the app deployed successfully.')
#       delay: 3
#       retries: 5
#       tags:
#         - controller-approval-check-home-page

#     - name: controller-approval-solve get pending approvals
#       ansible.builtin.uri:
#         url: "https://controller/api/v2/workflow_approvals/?name={{ 'Deploy to Prod?' | urlencode }}&status=pending"
#         method: GET
#         force_basic_auth: true
#         url_username: "{{ student_user }}"
#         url_password: "{{ student_password }}"
#         return_content: true
#         validate_certs: false
#       register: __workflow_approval_pending
#       until: __workflow_approval_pending.json.count > 0
#       delay: 2
#       retries: 12
#       tags:
#         - controller-approval-solve

#     - name: controller-approval-solve approve pending workflow
#       awx.awx.workflow_approval:
#         workflow_job_id: "{{ item.summary_fields.source_workflow_job.id}}"
#         name: "Deploy to Prod?"
#         interval: 2
#         timeout: 10
#         action: approve
#         controller_oauthtoken: "{{ auth_token }}"
#         controller_host: "{{ controller_hostname }}"
#         validate_certs: "{{ controller_validate_certs }}"
#       loop: "{{ __workflow_approval_pending.json.results }}"
#       tags:
#         - controller-approval-solve
